{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/layout/header.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","React","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","className","headerStyle","textAlign","linkStyle","Header","to","About","Fragment","App","axios","delete","then","response","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fdcb169d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass TodoItem extends Component {\r\n    //Dynamic styling with arrow function\r\n    getStyle = () =>{\r\n        // if(this.props.todo.completed){\r\n        //     return {\r\n        //         textDecoration: 'line-through'\r\n        //     }\r\n        // }\r\n        // else{\r\n        //     return{\r\n        //         textDecoration: 'none'\r\n        //     }\r\n        // }\r\n\r\n        return{\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc solid',\r\n            textDecoration: this.props.todo.completed \r\n            ? 'line-through'\r\n            : 'none'\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n        const {id, title}= this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id )}/> {' '}\r\n                    {title}\r\n                    <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>X</button>\r\n                </p>\r\n            </div>\r\n        )\r\n  }\r\n}\r\n\r\n//Proptypes\r\nTodoItem.propTypes ={\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nconst btnStyle ={\r\n    background:'#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 8px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n\r\n}\r\n\r\nexport default TodoItem;\r\n ","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends React.Component {\r\n\r\n\r\n  render(){\r\n    return this.props.todos.map((todo)=>(\r\n        <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo}/>\r\n    ));\r\n  }\r\n}\r\n\r\n//Proptypes\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default Todos;\r\n ","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class AddTodo extends Component {\r\n\r\n    state={\r\n        title:''\r\n    }\r\n\r\n    onChange =(e)=> this.setState({\r\n        [e.target.name]: e.target.value\r\n    });\r\n\r\n    onSubmit =(e)=>{\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title:''});\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{display: 'flex', padding: '5px'}}>\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"title\" \r\n                    value={this.state.title}\r\n                    placeholder=\"Add Todo...\"\r\n                    style={{flex: '10'}}\r\n                    onChange ={this.onChange}\r\n                />\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Submit\"\r\n                    className=\"btn\"\r\n                    style ={{flex:'1'}}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n//Proptypes\r\nAddTodo.propTypes ={\r\n    addTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n \r\nfunction Header(){\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>\r\n                Todo List\r\n            </h1>\r\n            <Link style={linkStyle} to=\"/\">Home </Link> \r\n            | <Link style={linkStyle} to=\"/about\"> About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle ={\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n\r\n}\r\n\r\nconst linkStyle ={\r\n    color: '#fff'\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is Todolist App v1.0.0. It is Part of a react crash course</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport Header from './components/layout/header';\nimport About from './components/pages/About';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\nimport uuid from 'uuid';\nimport axios from 'axios';\n\nclass App extends React.Component {\n\n  state ={\n    todos:[]\n\n    //Static data\n    // todos:[\n    //   {\n    //     id: uuid.v4(),\n    //     title: 'Practice guitar for 1 hour',\n    //     completed: false\n    //   },\n    //   {\n    //     id: uuid.v4(),\n    //     title: 'Do React CRUD',\n    //     completed: false\n    //   },\n    //   {\n    //     id: uuid.v4(),\n    //     title: 'Watch Movies',\n    //     completed: false\n    //   },\n    // ]\n  }\n\n  componentDidMount(){\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n      .then(response => this.setState({todos:response.data}))\n  }\n\n  //Toggle Complete\n  markComplete=(id)=>{\n    this.setState({\n      todos:this.state.todos.map(todo =>{\n        if(todo.id ===id){\n          todo.completed = !todo.completed\n        }\n        return todo;\n      })\n    })\n\n  }\n\n  //Delete Todo\n  delTodo =(id) =>{\n    axios.delete('https://jsonplaceholder.typicode.com/todos/${id}')\n      .then(response =>this.setState({\n        todos: [...this.state.todos.filter(todo => todo.id !==id)]\n      }));\n\n      // this.setState({\n      //   todos: [...this.state.todos.filter(todo => todo.id !==id)]\n      // })\n    \n  }\n\n  //Add Todo\n  addTodo = (title) => {\n    // const newTodo ={\n    //   id: uuid.v4(),\n    //   title,\n    //   completed: false\n    // }\n    // this.setState({todos: [...this.state.todos, newTodo]});\n\n\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\n      title,\n      completed:false\n    })\n      .then(response =>this.setState({todos: [...this.state.todos, response.data]}));\n\n  }\n\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" render={props=>(\n              <React.Fragment>\n                <AddTodo  addTodo ={this.addTodo}/>\n                <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo} />\n              </React.Fragment>\n            )}/>\n            <Route path=\"/about\" component={About}/>\n            \n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}